#!/usr/bin/env node

const http = require("http");
<% if (isMongo) { %>const mongoose = require('mongoose');<% } %>
const router = require("../src/server");
const { PORT<% if (isMongo) { %>, MONGO_URI<% } %> } = require("../config/keys");

// Creating the node server
const SERVER = http.createServer(router);
<% if (isMongo) { %>
mongoose.connect(MONGO_URI, (err) => {
    if (err) {
        throw err;
    }

    // Firing up the server on selected port
    SERVER.listen(PORT);
})
<% } %>
<% if (!isMongo) { %>
// Firing up the server on selected port
SERVER.listen(PORT);
<% } %>
SERVER.on("listening", () => {
    console.log("[Server]::LISTEN:%s", PORT);
});

// Callback function for checking connecting or error
SERVER.on("error", error => {
    throw new Error(`[Server]::ERROR:${error.message}`);
});

/**
 * For Handling unhandled promise rejection
 *
 * If any rejection occurs in the app,
 * then the server will forcefully shutdown
 * Ex: Like if the app is unable to connect to database then the app will shutdown.
 */
process.on("unhandledRejection", reason => {
    // I just caught an unhandled promise rejection,
    // since we already have fallback handler for unhandled errors (see below),
    // let throw and let him handle that
    console.log("[Unhandled Rejection]::", reason.message);

    throw reason;
});

process.on("uncaughtException", error => {
    // I just received an error that was never handled,
    // time to handle it and then decide whether a restart is needed
    console.log("[Uncaught Exception]::", error.message);

    throw error;
});
